@prefix cllm: <./cllm#> .
@prefix meta: <./meta#> .
@prefix metameta: <./metameta#> .
@prefix problem: <./problem#> .
@prefix solution: <./solution#> .
@prefix conversation: <./conversation#> .
@prefix process: <./process#> .
@prefix agent: <./agent#> .
@prefix time: <./time#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix install: <./install#> .

# Ontology Metadata
cllm: a owl:Ontology ;
    rdfs:label "CLLM Ontology"@en ;
    rdfs:comment "Ontology for the Command-Line LLM (CLLM) tool that enables composable command-line interactions with LLM APIs."@en ;
    owl:versionInfo "0.1.0" .

# Core Classes
cllm:CLLMTool a owl:Class ;
    rdfs:label "CLLM Tool"@en ;
    rdfs:comment "The main CLLM command-line tool for interacting with LLM APIs."@en .

cllm:APIProvider a owl:Class ;
    rdfs:label "API Provider"@en ;
    rdfs:comment "A provider of LLM API services (e.g., OpenAI, Azure)."@en .

cllm:Model a owl:Class ;
    rdfs:label "LLM Model"@en ;
    rdfs:comment "A language model that can be used with the CLLM tool."@en .

cllm:ProcessingMode a owl:Class ;
    rdfs:label "Processing Mode"@en ;
    rdfs:comment "Different modes of processing input (e.g., file chunks, stdin, single string)."@en .

cllm:Configuration a owl:Class ;
    rdfs:label "Configuration"@en ;
    rdfs:comment "Configuration settings for the CLLM tool."@en .

# Properties
cllm:hasProvider a owl:ObjectProperty ;
    rdfs:domain cllm:CLLMTool ;
    rdfs:range cllm:APIProvider ;
    rdfs:label "has provider"@en ;
    rdfs:comment "Links the CLLM tool to its API provider."@en .

cllm:usesModel a owl:ObjectProperty ;
    rdfs:domain cllm:CLLMTool ;
    rdfs:range cllm:Model ;
    rdfs:label "uses model"@en ;
    rdfs:comment "Specifies which LLM model is being used."@en .

cllm:hasProcessingMode a owl:ObjectProperty ;
    rdfs:domain cllm:CLLMTool ;
    rdfs:range cllm:ProcessingMode ;
    rdfs:label "has processing mode"@en ;
    rdfs:comment "Indicates the processing mode being used."@en .

cllm:hasConfiguration a owl:ObjectProperty ;
    rdfs:domain cllm:CLLMTool ;
    rdfs:range cllm:Configuration ;
    rdfs:label "has configuration"@en ;
    rdfs:comment "Links to the tool's configuration settings."@en .

cllm:contextLength a owl:DatatypeProperty ;
    rdfs:domain cllm:Configuration ;
    rdfs:range xsd:integer ;
    rdfs:label "context length"@en ;
    rdfs:comment "Maximum context length for processing input."@en .

cllm:maxInferenceCalls a owl:DatatypeProperty ;
    rdfs:domain cllm:Configuration ;
    rdfs:range xsd:integer ;
    rdfs:label "max inference calls"@en ;
    rdfs:comment "Maximum number of API calls allowed."@en .

# Add APICredentials class
cllm:APICredentials a owl:Class ;
    rdfs:label "API Credentials"@en ;
    rdfs:comment "Authentication credentials for accessing LLM API services."@en .

cllm:APIEndpoint a owl:Class ;
    rdfs:label "API Endpoint"@en ;
    rdfs:comment "Service endpoint URL for accessing LLM API services."@en .

# Add credential properties
cllm:hasCredentials a owl:ObjectProperty ;
    rdfs:domain cllm:APIProvider ;
    rdfs:range cllm:APICredentials ;
    rdfs:label "has credentials"@en ;
    rdfs:comment "Links an API provider to its authentication credentials."@en .

cllm:hasEndpoint a owl:ObjectProperty ;
    rdfs:domain cllm:APIProvider ;
    rdfs:range cllm:APIEndpoint ;
    rdfs:label "has endpoint"@en ;
    rdfs:comment "Links an API provider to its service endpoint."@en .

cllm:apiKey a owl:DatatypeProperty ;
    rdfs:domain cllm:APICredentials ;
    rdfs:range xsd:string ;
    rdfs:label "API key"@en ;
    rdfs:comment "The API key used for authentication."@en .

cllm:endpointUrl a owl:DatatypeProperty ;
    rdfs:domain cllm:APIEndpoint ;
    rdfs:range xsd:anyURI ;
    rdfs:label "endpoint URL"@en ;
    rdfs:comment "The URL of the API service endpoint."@en .

# Individuals
cllm:DefaultSystem a cllm:Configuration ;
    rdfs:label "Default System Configuration"@en ;
    rdfs:comment "Default system configuration for the CLLM tool."@en ;
    cllm:contextLength 2048 .

cllm:OpenAIProvider a cllm:APIProvider ;
    rdfs:label "OpenAI API Provider"@en ;
    rdfs:comment "OpenAI's API service for language models."@en .

cllm:AzureProvider a cllm:APIProvider ;
    rdfs:label "Azure OpenAI Provider"@en ;
    rdfs:comment "Microsoft Azure's OpenAI API service."@en .

cllm:FileChunkMode a cllm:ProcessingMode ;
    rdfs:label "File Chunk Processing Mode"@en ;
    rdfs:comment "Processes input files in chunks based on context length."@en .

cllm:SingleStringMode a cllm:ProcessingMode ;
    rdfs:label "Single String Processing Mode"@en ;
    rdfs:comment "Processes all input as a single string."@en .

# Add Azure-specific individuals
cllm:AzureCredentials a cllm:APICredentials ;
    rdfs:label "Azure OpenAI Credentials"@en ;
    rdfs:comment "Credentials for Azure OpenAI service stored in AZURE_OPENAI_API_KEY environment variable."@en .

cllm:AzureEndpoint a cllm:APIEndpoint ;
    rdfs:label "Azure OpenAI Endpoint"@en ;
    rdfs:comment "Azure OpenAI service endpoint stored in AZURE_OPENAI_ENDPOINT environment variable."@en .

# Link Azure provider to credentials and endpoint
cllm:AzureProvider 
    cllm:hasCredentials cllm:AzureCredentials ;
    cllm:hasEndpoint cllm:AzureEndpoint .

# SHACL Shapes
cllm:CLLMToolShape a sh:NodeShape ;
    sh:targetClass cllm:CLLMTool ;
    sh:property [
        sh:path cllm:hasProvider ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path cllm:usesModel ;
        sh:minCount 1 ;
    ] ;
    sh:property [
        sh:path cllm:hasProcessingMode ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] .

# Add SHACL shape for API configuration
cllm:APIProviderShape a sh:NodeShape ;
    sh:targetClass cllm:APIProvider ;
    sh:property [
        sh:path cllm:hasCredentials ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path cllm:hasEndpoint ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] .

# TODO Section
# Future extensions:
# - Add support for non-OpenAI APIs
# - Implement file-in-file-out processing patterns
# - Add DSPy integration for prompt compilation
# - Expand configuration options (temperature, etc.)
# - Add environment variable configuration support

# Classes
install:PackageManager a owl:Class ;
    rdfs:label "Package Manager" ;
    rdfs:comment "Tool used to manage Python package installation" .

install:PythonPackage a owl:Class ;
    rdfs:label "Python Package" ;
    rdfs:comment "A structured Python package with proper metadata" .

install:PackageMetadata a owl:Class ;
    rdfs:label "Package Metadata" ;
    rdfs:comment "Configuration and metadata for Python package" .

# Properties
install:usesPythonPackageManager a owl:ObjectProperty ;
    rdfs:domain install:InstallationProcess ;
    rdfs:range install:PackageManager ;
    rdfs:comment "Specifies the package manager used for installation" .

install:hasMetadata a owl:ObjectProperty ;
    rdfs:domain install:PythonPackage ;
    rdfs:range install:PackageMetadata ;
    rdfs:comment "Links a package to its metadata" .

install:requiresDependency a owl:ObjectProperty ;
    rdfs:domain install:PythonPackage ;
    rdfs:range install:PythonPackage ;
    rdfs:comment "Specifies package dependencies" .

# Individuals
install:Pipx a install:PackageManager ;
    rdfs:label "pipx" ;
    rdfs:comment "Tool for installing Python applications in isolated environments" .

install:CLLMPackage a install:PythonPackage ;
    rdfs:label "CLLM Package" ;
    install:hasMetadata install:PyProjectTOML ;
    install:requiresDependency install:OpenAI, install:Tiktoken .

install:PyProjectTOML a install:PackageMetadata ;
    rdfs:label "pyproject.toml" ;
    rdfs:comment "Modern Python package configuration file" .

# TODO
# - Add conda environment support
# - Include development dependencies
# - Add package versioning strategy
# - Include build system configurations

# Core Tool Definition
cllm:Tool a owl:Class ;
    rdfs:label "CLLM Tool" ;
    rdfs:comment "Command-line interface for LLM interaction" .

# Installation Components
cllm:Installation a owl:Class ;
    rdfs:label "Installation Process" ;
    rdfs:comment "Process and components for tool installation" .

cllm:PackageManager a owl:Class ;
    rdfs:label "Package Manager" ;
    rdfs:comment "Tool for managing Python package installation" .

cllm:Pipx a cllm:PackageManager ;
    rdfs:label "pipx" ;
    rdfs:comment "Isolated environment package installer for Python applications" .

# LLM Integration
cllm:LLMProvider a owl:Class ;
    rdfs:label "LLM Provider" ;
    rdfs:comment "Provider of LLM services" .

cllm:AzureOpenAI a cllm:LLMProvider ;
    rdfs:label "Azure OpenAI" ;
    rdfs:comment "Microsoft's Azure-hosted OpenAI service" .

# Credentials
cllm:Credentials a owl:Class ;
    rdfs:label "API Credentials" ;
    rdfs:comment "Authentication for LLM services" .

cllm:AzureCredentials a cllm:Credentials ;
    rdfs:label "Azure OpenAI Credentials" ;
    cllm:requires "AZURE_OPENAI_API_KEY" ;
    cllm:requires "AZURE_OPENAI_ENDPOINT" .

# Properties
cllm:requires a owl:ObjectProperty ;
    rdfs:domain cllm:Tool ;
    rdfs:range cllm:Credentials .

cllm:uses a owl:ObjectProperty ;
    rdfs:domain cllm:Tool ;
    rdfs:range cllm:LLMProvider .

cllm:installedBy a owl:ObjectProperty ;
    rdfs:domain cllm:Tool ;
    rdfs:range cllm:PackageManager .

# Current State
cllm:CurrentImplementation a owl:Class ;
    rdfs:comment """
    Current implementation characteristics:
    1. Direct Azure OpenAI integration
    2. Pipx-based installation
    3. Environment variable configuration
    4. User-level installation
    """ .

# Evolution Path
cllm:EvolutionPath a owl:Class ;
    rdfs:comment """
    Planned evolution:
    1. LangChain integration for provider abstraction
    2. Multiple LLM provider support
    3. Enhanced configuration management
    """ . 